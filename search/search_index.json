{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ortho_modificator","text":"<p>A python package for Orthophoto analysis and modification.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://gismam.github.io/ortho_modificator</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li>Process geospatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import geodev\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#ortho_modificator.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>ortho_modificator/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/gismam/ortho_modificator/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ortho_modificator could always use more documentation, whether as part of the official ortho_modificator docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/gismam/ortho_modificator/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up ortho_modificator for local development.</p> <ol> <li> <p>Fork the ortho_modificator repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/ortho_modificator.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv ortho_modificator\n$ cd ortho_modificator/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 ortho_modificator tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/gismam/ortho_modificator/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#ortho_modificator.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>ortho_modificator/foliumap.py</code> <pre><code>class Map(folium.Map):\n    def __init__(self, center=(0, 0), zoom=2, **kwargs):\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n        # folium.LayerControl().add_to(self)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.1}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        folium.GeoJson(data=geojson, **kwargs).add_to(self)\n\n        # if zoom_to_layer:\n        #     bounds = gdf.total_bounds\n        #     self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            data (_type_): _description_\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#ortho_modificator.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required Source code in <code>ortho_modificator/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): _description_\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ortho_modificator, run this command in your terminal:</p> <pre><code>pip install ortho_modificator\n</code></pre> <p>This is the preferred method to install ortho_modificator, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install ortho_modificator from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/gismam/ortho_modificator\n</code></pre>"},{"location":"ortho_modificator/","title":"ortho_modificator module","text":"<p>Main module.</p>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            center (list, optional): _description_. Defaults to [20, 0].\n            zoom (int, optional): _description_. Defaults to 2.\n            height (str, optional): _description_. Defaults to \"600px\".\n        \"\"\"\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Add basemap to the map.\n\n        Args:\n            basemap (str, optional): _description_. Defaults to \"OpenTopoMap\".\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Add Google Map to the map.\n\n        Args:\n            map_type (str, optional): _description_. Defaults to \"ROADMAP\".\n        \"\"\"\n\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"HYBRID\": \"y\",\n            \"TERRAIN\": \"p\",\n        }\n\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_geojson(\n        self,\n        data,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.1}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            data (_type_): _description_\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            gdf (_type_): _description_\n        \"\"\"\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            data (_type_): _description_\n\n        Raises:\n            ValueError: _description_\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"_summary_\"\"\"\n\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(control)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>description. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>description. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>description. Defaults to \"600px\".</p> <code>'600px'</code> Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        center (list, optional): _description_. Defaults to [20, 0].\n        zoom (int, optional): _description_. Defaults to 2.\n        height (str, optional): _description_. Defaults to \"600px\".\n    \"\"\"\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n    self.scroll_wheel_zoom = True\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Add basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>description. Defaults to \"OpenTopoMap\".</p> <code>'OpenTopoMap'</code> Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Add basemap to the map.\n\n    Args:\n        basemap (str, optional): _description_. Defaults to \"OpenTopoMap\".\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>_type_</code> <p>description</p> required Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        gdf (_type_): _description_\n    \"\"\"\n\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Add Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>description. Defaults to \"ROADMAP\".</p> <code>'ROADMAP'</code> Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Add Google Map to the map.\n\n    Args:\n        map_type (str, optional): _description_. Defaults to \"ROADMAP\".\n    \"\"\"\n\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"HYBRID\": \"y\",\n        \"TERRAIN\": \"p\",\n    }\n\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>summary</p> Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"_summary_\"\"\"\n\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(control)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): _description_\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"ortho_modificator/#ortho_modificator.ortho_modificator.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>description</p> Source code in <code>ortho_modificator/ortho_modificator.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): _description_\n\n    Raises:\n        ValueError: _description_\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use ortho_modificator in a project:</p> <pre><code>import ortho_modificator\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import ortho_modificator.foliumap as ortho_modificator\n</pre> import ortho_modificator.foliumap as ortho_modificator In\u00a0[2]: Copied! <pre>m = ortho_modificator.Map(center=[40, -100], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\"\nm.add_geojson(url, name=\"US States\")\nm.add_layer_control()\nm\n</pre> m = ortho_modificator.Map(center=[40, -100], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\" m.add_geojson(url, name=\"US States\") m.add_layer_control() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import ortho_modificator\n</pre> import ortho_modificator In\u00a0[2]: Copied! <pre>m = ortho_modificator.Map(center=[40, -100], zoom=4)\nm.add_basemap(basemap=\"NASAGIBS.ViirsEarthAtNight2012\")\nm\n</pre> m = ortho_modificator.Map(center=[40, -100], zoom=4) m.add_basemap(basemap=\"NASAGIBS.ViirsEarthAtNight2012\") m Out[2]: In\u00a0[3]: Copied! <pre>m2 = ortho_modificator.Map(center=[40, -100], zoom=4)\nm2.add_google_map(\"terrain\")\nm2\n</pre> m2 = ortho_modificator.Map(center=[40, -100], zoom=4) m2.add_google_map(\"terrain\") m2 Out[3]: In\u00a0[4]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38.128, 2.588]\nzoom = 5\n\nMap(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = [38.128, 2.588] zoom = 5  Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) Out[4]: In\u00a0[5]: Copied! <pre># from ortho_modificator import ortho_modificator\n</pre> # from ortho_modificator import ortho_modificator In\u00a0[6]: Copied! <pre># import ortho_modificator.ortho_modificator as om\n</pre> # import ortho_modificator.ortho_modificator as om In\u00a0[7]: Copied! <pre># m = om.Map()\n# m\n</pre> # m = om.Map() # m In\u00a0[8]: Copied! <pre>ortho_modificator.__version__\n</pre> ortho_modificator.__version__ Out[8]: <pre>'0.0.2'</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import ortho_modificator\n</pre> import ortho_modificator In\u00a0[2]: Copied! <pre>m = ortho_modificator.Map()\ndata = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\"\nm.add_geojson(data, name=\"Countries\")\nm.add_layer_control()\nm\n</pre> m = ortho_modificator.Map() data = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\" m.add_geojson(data, name=\"Countries\") m.add_layer_control() m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""}]}